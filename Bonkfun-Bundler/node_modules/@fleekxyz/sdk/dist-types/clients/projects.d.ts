import { Client, Project as ProjectWithRelations } from '@fleekxyz/gql-client-utils';
import { File } from '@web-std/file';
type ProjectsClientOptions = {
    graphqlClient: Client;
};
type CreateProjectArgs = {
    name: string;
};
type UpdateProjectArgs = {
    where: {
        id: string;
    };
    data: {
        name?: string;
        avatar?: typeof File['prototype'];
        backupStorageOnArweave?: boolean;
        backupStorageOnFilecoin?: boolean;
    };
};
type GetProjectArgs = {
    id: string;
};
export type Project = Omit<ProjectWithRelations, 'memberships' | 'membershipsPaginated'>;
export declare class ProjectsClient {
    private graphqlClient;
    private static PROJECT_MAPPED_PROPERTIES;
    constructor(options: ProjectsClientOptions);
    create: ({ name }: CreateProjectArgs) => Promise<Project>;
    update: ({ where, data }: UpdateProjectArgs) => Promise<Pick<{
        acceptInvitation: import("@fleekxyz/gql-client-utils").Membership;
        createApplication: import("@fleekxyz/gql-client-utils").Application;
        createCustomIpfsDeployment: import("@fleekxyz/gql-client-utils").Deployment;
        createDnsConfig: import("@fleekxyz/gql-client-utils").DnsConfig;
        createDomain: import("@fleekxyz/gql-client-utils").Domain;
        createEnsRecord: import("@fleekxyz/gql-client-utils").EnsRecord;
        createFunction: import("@fleekxyz/gql-client-utils").Functions;
        createGithubAppAuthorizationUrl: string;
        createGithubAppInstallationUrl: string;
        createInvitation: string;
        createIpnsRecord: import("@fleekxyz/gql-client-utils").IpnsRecord;
        createIpnsRecordForSite: import("@fleekxyz/gql-client-utils").IpnsRecord;
        createLoginVerificationSession: boolean;
        createMigrationRequestsFromToken: import("@fleekxyz/gql-client-utils").MigrationRequest[];
        createMigrationToken: string;
        createPersonalAccessTokenFromVerificationSession: string;
        createPrivateGateway: import("@fleekxyz/gql-client-utils").PrivateGateway;
        createProject: ProjectWithRelations;
        createPublicKeyChallenge: string;
        createSecret: import("@fleekxyz/gql-client-utils").Secret;
        createSite: import("@fleekxyz/gql-client-utils").Site;
        createTemplate: import("@fleekxyz/gql-client-utils").Template;
        createZoneForPrivateGateway: import("@fleekxyz/gql-client-utils").Zone;
        createZoneForSite: import("@fleekxyz/gql-client-utils").Zone;
        declineInvitation: boolean;
        deleteApplication: import("@fleekxyz/gql-client-utils").Application;
        deleteDomain: import("@fleekxyz/gql-client-utils").Domain;
        deleteEnsRecord: import("@fleekxyz/gql-client-utils").EnsRecord;
        deleteFunction: import("@fleekxyz/gql-client-utils").Functions;
        deleteInvitation: import("@fleekxyz/gql-client-utils").Invitation;
        deleteIpnsRecord: import("@fleekxyz/gql-client-utils").IpnsRecord;
        deleteMembership: import("@fleekxyz/gql-client-utils").Membership;
        deletePersonalAccessToken: import("@fleekxyz/gql-client-utils").PersonalAccessToken;
        deletePin: import("@fleekxyz/gql-client-utils").Pin;
        deletePrivateGateway: import("@fleekxyz/gql-client-utils").PrivateGateway;
        deleteProject: ProjectWithRelations;
        deleteRecoveryCodes: boolean;
        deleteSecret: import("@fleekxyz/gql-client-utils").Secret;
        deleteSecretKey: boolean;
        deleteSite: import("@fleekxyz/gql-client-utils").Site;
        deleteTemplate: import("@fleekxyz/gql-client-utils").Template;
        deleteUser: import("@fleekxyz/gql-client-utils").User;
        deleteZone: import("@fleekxyz/gql-client-utils").Zone;
        disableTwoFactorProtectedAction: boolean;
        enableTwoFactorProtectedAction: boolean;
        generateRecoveryCodes: import("@fleekxyz/gql-client-utils").RecoveryCodes;
        generateTwoFactorSecretKey: import("@fleekxyz/gql-client-utils").SecretKey;
        linkPublicKey: import("@fleekxyz/gql-client-utils").PublicKey;
        loginWithDynamic: string;
        loginWithPersonalAccessToken: string;
        promoteDeployment: boolean;
        publishIpnsRecord: import("@fleekxyz/gql-client-utils").IpnsRecord;
        publishSignedIpnsName: string;
        purgeSiteCache: import("@fleekxyz/gql-client-utils").Site;
        retryDeployment: import("@fleekxyz/gql-client-utils").Deployment;
        selectPrimaryDomain: import("@fleekxyz/gql-client-utils").Domain;
        stopDeployment: boolean;
        triggerDeployment: import("@fleekxyz/gql-client-utils").Deployment;
        updateApplication: import("@fleekxyz/gql-client-utils").Application;
        updatePin: import("@fleekxyz/gql-client-utils").Pin;
        updatePrivateGateway: import("@fleekxyz/gql-client-utils").PrivateGateway;
        updateProject: Pick<{
            avatar?: any;
            backupStorageOnArweave?: import("@genql/runtime").FieldsSelection<boolean | undefined, number | boolean | undefined>;
            backupStorageOnFilecoin?: import("@genql/runtime").FieldsSelection<boolean | undefined, number | boolean | undefined>;
            createdAt: any;
            githubAppInstallationId?: import("@genql/runtime").FieldsSelection<string | undefined, number | boolean | undefined>;
            id: string;
            memberships: Pick<{
                createdAt: any;
                id: string;
                role: import("@fleekxyz/gql-client-utils").Role;
                updatedAt: any;
                user: import("@fleekxyz/gql-client-utils").User;
                __typename: "Membership";
            }, "createdAt" | "updatedAt" | "id" | "role" | "__typename">[];
            membershipsPaginated: import("@genql/runtime").FieldsSelection<import("@fleekxyz/gql-client-utils").MembershipsWithNestedAggregation, import("@fleekxyz/gql-client-utils").MembershipsWithNestedAggregationRequest | [{
                filter?: import("@fleekxyz/gql-client-utils").PaginationInput | null | undefined;
            }, import("@fleekxyz/gql-client-utils").MembershipsWithNestedAggregationRequest] | undefined>;
            name: string;
            updatedAt: any;
            __typename: "Project";
        }, "createdAt" | "updatedAt" | "name" | "id" | "avatar" | "backupStorageOnArweave" | "backupStorageOnFilecoin" | "githubAppInstallationId" | "memberships" | "membershipsPaginated" | "__typename" | undefined>;
        updateSecret: import("@fleekxyz/gql-client-utils").Secret;
        updateSite: import("@fleekxyz/gql-client-utils").Site;
        updateTemplate: import("@fleekxyz/gql-client-utils").Template;
        updateTwoFactorSecretKey: import("@fleekxyz/gql-client-utils").SecretKey;
        updateUser: import("@fleekxyz/gql-client-utils").User;
        verifyDnslink: import("@fleekxyz/gql-client-utils").Domain;
        verifyDomain: import("@fleekxyz/gql-client-utils").Domain;
        verifyEnsRecord: import("@fleekxyz/gql-client-utils").EnsRecord;
        verifyTwoFactorSecretKey: import("@fleekxyz/gql-client-utils").SecretKey;
        __typename: "Mutation";
    }, "updateProject">>;
    get: ({ id }: GetProjectArgs) => Promise<Project>;
    list: () => Promise<Project[]>;
}
export {};
//# sourceMappingURL=projects.d.ts.map