import 'isomorphic-fetch';
import { Client, Pin } from '@fleekxyz/gql-client-utils';
import { FileLike } from '@web3-storage/upload-client/types';
import { UploadPinResponse, UploadProxyClient } from './uploadProxy';
export type StoragePin = Pick<Pin, 'cid' | 'filename' | 'extension' | 'arweavePin'> & {
    filecoinDealIds?: string;
    arweaveId?: string;
};
export type PinByCidArgs = Pick<Pin, 'cid'>;
export type PinByFilenameArgs = Pick<Pin, 'filename' | 'extension'>;
export type GetPinArgs = PinByCidArgs;
export type GetPinByFilenameArgs = PinByFilenameArgs;
export type DeletePinArgs = PinByCidArgs;
type StorageClientOptions = {
    graphqlClient: Client;
    uploadProxyClient: UploadProxyClient;
};
type UploadProgress = {
    loadedSize: number;
    totalSize: number;
};
type UploadDirectoryArgs = {
    path: string;
    options?: UploadDirectoryOptions;
    onUploadProgress?: (uploadProgress: UploadProgress) => void;
};
type UploadDirectoryOptions = {
    siteId?: string;
};
type UploadFileArgs = {
    file: FileLike;
    onUploadProgress?: (uploadProgress: UploadProgress) => void;
};
type UploadRawFileArgs = UploadFileArgs;
type UploadVirtualDirectoryArgs = {
    files: FileLike[];
    directoryName: string;
    onUploadProgress?: (uploadProgress: UploadProgress) => void;
};
export declare class StorageClient {
    private graphqlClient;
    private uploadProxyClient;
    private static SITE_MAPPED_PROPERTIES;
    private static STORAGE_MAPPED_PROPERTIES;
    constructor(options: StorageClientOptions);
    uploadDirectory: ({ path, options, onUploadProgress }: UploadDirectoryArgs) => Promise<UploadPinResponse>;
    uploadVirtualDirectory: ({ files, directoryName, onUploadProgress, }: UploadVirtualDirectoryArgs) => Promise<UploadPinResponse>;
    uploadFile: ({ file, onUploadProgress }: UploadRawFileArgs) => Promise<UploadPinResponse>;
    get: ({ cid }: GetPinArgs) => Promise<StoragePin>;
    getByFilename: ({ filename, extension }: GetPinByFilenameArgs) => Promise<StoragePin[]>;
    list: () => Promise<StoragePin[]>;
    delete: ({ cid }: DeletePinArgs) => Promise<{
        status: number;
        body: any;
    }>;
}
export {};
//# sourceMappingURL=storage.d.ts.map