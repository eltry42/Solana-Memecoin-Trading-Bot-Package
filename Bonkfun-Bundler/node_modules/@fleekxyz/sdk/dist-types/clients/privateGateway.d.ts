import { Client, PrivateGateway as PrivateGatewayWithRelations, Project } from '@fleekxyz/gql-client-utils';
type PrivateGatewayClientOptions = {
    graphqlClient: Client;
};
export type GetPrivateGatewayArgs = {
    id: string;
};
export type CreatePrivateGatewayArgs = {
    name: string;
    zoneId: string;
};
export type DeletePrivateGatewayArgs = {
    id: string;
};
export type UpdatePrivateGatewayArgs = {
    id: string;
    name: string;
};
export type GetPrivateGatewayBySlugArgs = {
    slug: string;
};
export type PrivateGateway = Omit<PrivateGatewayWithRelations, 'project' | 'domains' | 'domainsPaginated' | 'primaryDomain'> & {
    project: Pick<Project, 'id'>;
};
export declare class PrivateGatewayClient {
    private graphqlClient;
    private static PRIVATE_GATEWAY_MAPPED_PROPERTIES;
    constructor(options: PrivateGatewayClientOptions);
    get: ({ id }: GetPrivateGatewayArgs) => Promise<PrivateGateway>;
    getBySlug: ({ slug }: GetPrivateGatewayBySlugArgs) => Promise<PrivateGateway>;
    list: () => Promise<PrivateGateway[]>;
    create: ({ name, zoneId }: CreatePrivateGatewayArgs) => Promise<Pick<{
        createdAt: any;
        domains: Pick<{
            createdAt: any;
            dnsConfigs: import("@fleekxyz/gql-client-utils").DnsConfig[];
            dnslinkStatus?: import("@fleekxyz/gql-client-utils").DnslinkStatus | undefined;
            errorMessage?: string | undefined;
            hostname: string;
            id: string;
            isVerified: boolean;
            project?: Project | undefined;
            status: import("@fleekxyz/gql-client-utils").DomainStatus;
            updatedAt: any;
            zone?: import("@fleekxyz/gql-client-utils").Zone | undefined;
            __typename: "Domain";
        }, "createdAt" | "updatedAt" | "id" | "hostname" | "status" | "dnslinkStatus" | "errorMessage" | "isVerified" | "__typename" | undefined>[];
        domainsPaginated?: import("@genql/runtime").FieldsSelection<import("@fleekxyz/gql-client-utils").DomainsWithNestedAggregation | undefined, import("@fleekxyz/gql-client-utils").DomainsWithNestedAggregationRequest | [{
            filter?: import("@fleekxyz/gql-client-utils").PaginationInput | null | undefined;
        }, import("@fleekxyz/gql-client-utils").DomainsWithNestedAggregationRequest] | undefined> | undefined;
        id: string;
        name: string;
        primaryDomain?: Pick<{
            createdAt: any;
            dnsConfigs: import("@fleekxyz/gql-client-utils").DnsConfig[];
            dnslinkStatus?: import("@fleekxyz/gql-client-utils").DnslinkStatus | undefined;
            errorMessage?: string | undefined;
            hostname: string;
            id: string;
            isVerified: boolean;
            project?: Project | undefined;
            status: import("@fleekxyz/gql-client-utils").DomainStatus;
            updatedAt: any;
            zone?: import("@fleekxyz/gql-client-utils").Zone | undefined;
            __typename: "Domain";
        }, "createdAt" | "updatedAt" | "id" | "hostname" | "status" | "dnslinkStatus" | "errorMessage" | "isVerified" | "__typename" | undefined> | undefined;
        project: Pick<{
            avatar?: any;
            backupStorageOnArweave?: boolean | undefined;
            backupStorageOnFilecoin?: boolean | undefined;
            createdAt: any;
            githubAppInstallationId?: string | undefined;
            id: string;
            memberships: import("@fleekxyz/gql-client-utils").Membership[];
            membershipsPaginated: import("@fleekxyz/gql-client-utils").MembershipsWithNestedAggregation;
            name: string;
            updatedAt: any;
            __typename: "Project";
        }, "createdAt" | "updatedAt" | "name" | "id" | "avatar" | "backupStorageOnArweave" | "backupStorageOnFilecoin" | "githubAppInstallationId" | "__typename" | undefined>;
        slug: string;
        updatedAt: any;
        zone?: Pick<{
            createdAt: any;
            id: string;
            originUrl?: string | undefined;
            originUrlChangedAt?: any;
            originUrlChangedBy?: import("@fleekxyz/gql-client-utils").User | undefined;
            project?: Project | undefined;
            status: import("@fleekxyz/gql-client-utils").ZoneStatus;
            type: import("@fleekxyz/gql-client-utils").ZoneType;
            updatedAt: any;
            __typename: "Zone";
        }, "createdAt" | "updatedAt" | "id" | "status" | "type" | "originUrl" | "originUrlChangedAt" | "__typename" | undefined> | undefined;
        __typename: "PrivateGateway";
    }, "createdAt" | "updatedAt" | "name" | "id" | "project" | "zone" | "slug" | "domains" | "domainsPaginated" | "primaryDomain" | "__typename" | undefined>>;
    delete: ({ id }: DeletePrivateGatewayArgs) => Promise<Pick<{
        createdAt: any;
        domains: Pick<{
            createdAt: any;
            dnsConfigs: import("@fleekxyz/gql-client-utils").DnsConfig[];
            dnslinkStatus?: import("@fleekxyz/gql-client-utils").DnslinkStatus | undefined;
            errorMessage?: string | undefined;
            hostname: string;
            id: string;
            isVerified: boolean;
            project?: Project | undefined;
            status: import("@fleekxyz/gql-client-utils").DomainStatus;
            updatedAt: any;
            zone?: import("@fleekxyz/gql-client-utils").Zone | undefined;
            __typename: "Domain";
        }, "createdAt" | "updatedAt" | "id" | "hostname" | "status" | "dnslinkStatus" | "errorMessage" | "isVerified" | "__typename" | undefined>[];
        domainsPaginated?: import("@genql/runtime").FieldsSelection<import("@fleekxyz/gql-client-utils").DomainsWithNestedAggregation | undefined, import("@fleekxyz/gql-client-utils").DomainsWithNestedAggregationRequest | [{
            filter?: import("@fleekxyz/gql-client-utils").PaginationInput | null | undefined;
        }, import("@fleekxyz/gql-client-utils").DomainsWithNestedAggregationRequest] | undefined> | undefined;
        id: string;
        name: string;
        primaryDomain?: Pick<{
            createdAt: any;
            dnsConfigs: import("@fleekxyz/gql-client-utils").DnsConfig[];
            dnslinkStatus?: import("@fleekxyz/gql-client-utils").DnslinkStatus | undefined;
            errorMessage?: string | undefined;
            hostname: string;
            id: string;
            isVerified: boolean;
            project?: Project | undefined;
            status: import("@fleekxyz/gql-client-utils").DomainStatus;
            updatedAt: any;
            zone?: import("@fleekxyz/gql-client-utils").Zone | undefined;
            __typename: "Domain";
        }, "createdAt" | "updatedAt" | "id" | "hostname" | "status" | "dnslinkStatus" | "errorMessage" | "isVerified" | "__typename" | undefined> | undefined;
        project: Pick<{
            avatar?: any;
            backupStorageOnArweave?: boolean | undefined;
            backupStorageOnFilecoin?: boolean | undefined;
            createdAt: any;
            githubAppInstallationId?: string | undefined;
            id: string;
            memberships: import("@fleekxyz/gql-client-utils").Membership[];
            membershipsPaginated: import("@fleekxyz/gql-client-utils").MembershipsWithNestedAggregation;
            name: string;
            updatedAt: any;
            __typename: "Project";
        }, "createdAt" | "updatedAt" | "name" | "id" | "avatar" | "backupStorageOnArweave" | "backupStorageOnFilecoin" | "githubAppInstallationId" | "__typename" | undefined>;
        slug: string;
        updatedAt: any;
        zone?: Pick<{
            createdAt: any;
            id: string;
            originUrl?: string | undefined;
            originUrlChangedAt?: any;
            originUrlChangedBy?: import("@fleekxyz/gql-client-utils").User | undefined;
            project?: Project | undefined;
            status: import("@fleekxyz/gql-client-utils").ZoneStatus;
            type: import("@fleekxyz/gql-client-utils").ZoneType;
            updatedAt: any;
            __typename: "Zone";
        }, "createdAt" | "updatedAt" | "id" | "status" | "type" | "originUrl" | "originUrlChangedAt" | "__typename" | undefined> | undefined;
        __typename: "PrivateGateway";
    }, "createdAt" | "updatedAt" | "name" | "id" | "project" | "zone" | "slug" | "domains" | "domainsPaginated" | "primaryDomain" | "__typename" | undefined>>;
    update: ({ id, name }: UpdatePrivateGatewayArgs) => Promise<Pick<{
        createdAt: any;
        domains: Pick<{
            createdAt: any;
            dnsConfigs: import("@fleekxyz/gql-client-utils").DnsConfig[];
            dnslinkStatus?: import("@fleekxyz/gql-client-utils").DnslinkStatus | undefined;
            errorMessage?: string | undefined;
            hostname: string;
            id: string;
            isVerified: boolean;
            project?: Project | undefined;
            status: import("@fleekxyz/gql-client-utils").DomainStatus;
            updatedAt: any;
            zone?: import("@fleekxyz/gql-client-utils").Zone | undefined;
            __typename: "Domain";
        }, "createdAt" | "updatedAt" | "id" | "hostname" | "status" | "dnslinkStatus" | "errorMessage" | "isVerified" | "__typename" | undefined>[];
        domainsPaginated?: import("@genql/runtime").FieldsSelection<import("@fleekxyz/gql-client-utils").DomainsWithNestedAggregation | undefined, import("@fleekxyz/gql-client-utils").DomainsWithNestedAggregationRequest | [{
            filter?: import("@fleekxyz/gql-client-utils").PaginationInput | null | undefined;
        }, import("@fleekxyz/gql-client-utils").DomainsWithNestedAggregationRequest] | undefined> | undefined;
        id: string;
        name: string;
        primaryDomain?: Pick<{
            createdAt: any;
            dnsConfigs: import("@fleekxyz/gql-client-utils").DnsConfig[];
            dnslinkStatus?: import("@fleekxyz/gql-client-utils").DnslinkStatus | undefined;
            errorMessage?: string | undefined;
            hostname: string;
            id: string;
            isVerified: boolean;
            project?: Project | undefined;
            status: import("@fleekxyz/gql-client-utils").DomainStatus;
            updatedAt: any;
            zone?: import("@fleekxyz/gql-client-utils").Zone | undefined;
            __typename: "Domain";
        }, "createdAt" | "updatedAt" | "id" | "hostname" | "status" | "dnslinkStatus" | "errorMessage" | "isVerified" | "__typename" | undefined> | undefined;
        project: Pick<{
            avatar?: any;
            backupStorageOnArweave?: boolean | undefined;
            backupStorageOnFilecoin?: boolean | undefined;
            createdAt: any;
            githubAppInstallationId?: string | undefined;
            id: string;
            memberships: import("@fleekxyz/gql-client-utils").Membership[];
            membershipsPaginated: import("@fleekxyz/gql-client-utils").MembershipsWithNestedAggregation;
            name: string;
            updatedAt: any;
            __typename: "Project";
        }, "createdAt" | "updatedAt" | "name" | "id" | "avatar" | "backupStorageOnArweave" | "backupStorageOnFilecoin" | "githubAppInstallationId" | "__typename" | undefined>;
        slug: string;
        updatedAt: any;
        zone?: Pick<{
            createdAt: any;
            id: string;
            originUrl?: string | undefined;
            originUrlChangedAt?: any;
            originUrlChangedBy?: import("@fleekxyz/gql-client-utils").User | undefined;
            project?: Project | undefined;
            status: import("@fleekxyz/gql-client-utils").ZoneStatus;
            type: import("@fleekxyz/gql-client-utils").ZoneType;
            updatedAt: any;
            __typename: "Zone";
        }, "createdAt" | "updatedAt" | "id" | "status" | "type" | "originUrl" | "originUrlChangedAt" | "__typename" | undefined> | undefined;
        __typename: "PrivateGateway";
    }, "createdAt" | "updatedAt" | "name" | "id" | "project" | "zone" | "slug" | "domains" | "domainsPaginated" | "primaryDomain" | "__typename" | undefined>>;
}
export {};
//# sourceMappingURL=privateGateway.d.ts.map