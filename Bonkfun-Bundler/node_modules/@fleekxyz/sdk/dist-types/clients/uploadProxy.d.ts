import 'isomorphic-fetch';
import { Pin } from '@fleekxyz/gql-client-utils';
import { Block } from '@web3-storage/upload-client/car';
import { AccessTokenService } from '../libs/AccessTokenService/AccessTokenService';
type UploadProgress = {
    loadedSize: number;
    totalSize: number;
};
type UploadProxyClientOptions = {
    accessTokenService: AccessTokenService;
    uploadProxyApiUrl: string;
};
type UploadContentArgs = {
    getStream: () => ReadableStream<Block>;
    basename: string;
    options?: UploadContentOptions;
    onUploadProgress?: (uploadProgress: UploadProgress) => void;
};
type UploadContentOptions = {
    siteId?: string;
};
export type UploadPinResponse = {
    pin: Pick<Pin, 'cid' | 'size'>;
    duplicate: boolean;
};
export declare class UploadProxyClient {
    private uploadProxyApiUrl;
    private accessTokenService;
    constructor(options: UploadProxyClientOptions);
    uploadContent: ({ getStream, basename, options, onUploadProgress }: UploadContentArgs) => Promise<{
        pin: {
            cid: string;
            size: number;
        };
        duplicate: boolean;
    }>;
    delete: (cid: string) => Promise<Response>;
    private getStreamCidAndTotalSize;
    private checkPinDuplicity;
}
export {};
//# sourceMappingURL=uploadProxy.d.ts.map