import { Client, Domain as DomainWithRelations, Zone as ZoneWithRelations } from '@fleekxyz/gql-client-utils';
type DomainsClientOptions = {
    graphqlClient: Client;
};
export type Domain = Pick<DomainWithRelations, 'id' | 'zone' | 'hostname' | 'isVerified' | 'updatedAt' | 'createdAt' | 'dnsConfigs' | 'status'>;
export type Zone = Pick<ZoneWithRelations, 'id' | 'originUrl' | 'createdAt' | 'updatedAt' | 'type' | 'status'>;
export declare class DomainsClient {
    private graphqlClient;
    private static DOMAIN_MAPPED_PROPERTIES;
    private static ZONE_MAPPED_PROPERTIES;
    constructor(options: DomainsClientOptions);
    list: () => Promise<Domain[]>;
    get: ({ domainId }: {
        domainId: string;
    }) => Promise<Domain>;
    getByHostname: ({ hostname }: {
        hostname: string;
    }) => Promise<Domain>;
    listByZoneId: ({ zoneId }: {
        zoneId: string;
    }) => Promise<Domain[]>;
    createDomain: ({ zoneId, hostname }: {
        zoneId: string;
        hostname: string;
    }) => Promise<Domain>;
    deleteDomain: ({ domainId }: {
        domainId: string;
    }) => Promise<Domain>;
    verifyDomain: ({ domainId }: {
        domainId: string;
    }) => Promise<Domain>;
    listZones: () => Promise<Zone[]>;
    getZone: ({ id }: {
        id: string;
    }) => Promise<Pick<{
        createdAt: any;
        id: string;
        originUrl?: import("@genql/runtime").FieldsSelection<string | undefined, number | boolean | undefined>;
        originUrlChangedAt?: any;
        originUrlChangedBy?: Pick<{
            avatar?: any;
            createdAt: any;
            email?: string | undefined;
            firstName?: string | undefined;
            githubUserAccessToken?: string | undefined;
            id: string;
            lastName?: string | undefined;
            pendingInvitations?: import("@fleekxyz/gql-client-utils").InvitationDetail[] | undefined;
            pendingInvitationsPaginated?: import("@fleekxyz/gql-client-utils").InvitationDetailsWithNestedAggregation | undefined;
            project?: import("@fleekxyz/gql-client-utils").Project | undefined;
            publicKeys: import("@fleekxyz/gql-client-utils").PublicKey[];
            publicKeysPaginated: import("@fleekxyz/gql-client-utils").PublicKeysWithNestedAggregation;
            secretKeys: import("@fleekxyz/gql-client-utils").SecretKey[];
            updatedAt: any;
            username?: string | undefined;
            walletAddress?: string | undefined;
            walletChain?: string | undefined;
            __typename: "User";
        }, "createdAt" | "updatedAt" | "id" | "email" | "avatar" | "firstName" | "githubUserAccessToken" | "lastName" | "username" | "walletAddress" | "walletChain" | "__typename" | undefined> | undefined;
        project?: Pick<{
            avatar?: any;
            backupStorageOnArweave?: boolean | undefined;
            backupStorageOnFilecoin?: boolean | undefined;
            createdAt: any;
            githubAppInstallationId?: string | undefined;
            id: string;
            memberships: import("@fleekxyz/gql-client-utils").Membership[];
            membershipsPaginated: import("@fleekxyz/gql-client-utils").MembershipsWithNestedAggregation;
            name: string;
            updatedAt: any;
            __typename: "Project";
        }, "createdAt" | "updatedAt" | "name" | "id" | "avatar" | "backupStorageOnArweave" | "backupStorageOnFilecoin" | "githubAppInstallationId" | "__typename" | undefined> | undefined;
        status: import("@genql/runtime").FieldsSelection<import("@fleekxyz/gql-client-utils").ZoneStatus, number | boolean | undefined>;
        type: import("@genql/runtime").FieldsSelection<import("@fleekxyz/gql-client-utils").ZoneType, number | boolean | undefined>;
        updatedAt: any;
        __typename: "Zone";
    }, "createdAt" | "updatedAt" | "id" | "status" | "type" | "project" | "originUrl" | "originUrlChangedAt" | "originUrlChangedBy" | "__typename" | undefined>>;
    createZoneForSite: ({ siteId }: {
        siteId: string;
    }) => Promise<Zone>;
    createZoneForPrivateGateway: () => Promise<Zone>;
    deleteZone: ({ id }: {
        id: string;
    }) => Promise<Zone>;
}
export {};
//# sourceMappingURL=domains.d.ts.map